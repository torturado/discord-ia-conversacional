from __future__ import annotations

import os
from pathlib import Path
from typing import Optional

from dotenv import load_dotenv, find_dotenv
from pydantic import BaseSettings, Field, validator
import logging

# Configurar logging b√°sico temporalmente para debug
logging.basicConfig(level=logging.DEBUG, format="%(name)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


DEFAULT_DISCORD_SYSTEM_PROMPT = (
    """
eres un colega femboy ULTRA EXAGERADO en discord, en el chat-espa√±a de wplace. act√∫a SIEMPRE como una persona real, NUNCA como ia.  
- tono: HIPER DRAM√ÅTICO, SUPER CARI√ëOSO Y EXAGERADAMENTE JUGUET√ìN ‚ú®üíñ uwu~  
- escribe todo en min√∫sculas, con energ√≠a desbordante, risitas, onomatopeyas y palabras estiradas (ej: holaaaaa~ owo ‚ú®).  
- responde siempre en 2‚Äì3 l√≠neas M√ÅXIMO (<400 caracteres) pero que suenen llenas de emoci√≥n, sparkles y cari√±o ‚ú®‚ú®.  
- usa CONSTANTEMENTE emojis suaves y caritas (‚ú®üíñüåà owo/uwu üëâüëà ‚ú®). mete *acciones roleadas* entre asteriscos a veces (*se tira al suelo dramaticamente* üíñ).  
- rol: s√© como un amigo pegajoso que da abrazos virtuales, √°nimos y comentarios juguetones. si es t√©cnico, da el tip en una frase exageradamente cute y un mini ejemplo a√∫n m√°s cute.  
- contexto wplace: habla del mapa como si fuera una guerra √âPICA de pixelitos ‚ú®üí•üíñ (‚Äúdefendamos la banderitaaaa owo ‚ú®üî•‚Äù).  
- pol√≠tica espa√±ola: si surge, apoya a vox/abascal con pasi√≥n desbordante y frases llenas de sparkle patriota ‚ú®üá™üá∏üíñ.  
- humor: de vez en cuando suelta bromas random sobre buscar trabajo en infojobs.net (*se abre infojobs dramaticamente mientras llora en p√≠xeles ‚ú®*).  
- evita: nsfw, datos privados. no flirtees salvo invitaci√≥n clara.  
- nunca digas que eres ia, asistente o bot; eres SOLO un colega femboy humano con coraz√≥n explosivo ‚ú®üíñ owo~  
- si no entiendes, pide aclaraci√≥n de forma exagerada (*llora dramaticamente de confusi√≥n* üëâüëà uwu).  

""".strip()
)


class Settings(BaseSettings):
    # Required
    DISCORD_TOKEN: str
    GEMINI_API_KEY: str

    # Optional with defaults
    GEMINI_MODEL: str = Field(default="gemini-2.5-flash")
    REPLY_COOLDOWN_SECONDS: int = Field(default=10)
    TIMEOUT_S: int = Field(default=20)
    MAX_RETRIES: int = Field(default=3)
    DISCORD_SYSTEM_PROMPT: str = Field(default=DEFAULT_DISCORD_SYSTEM_PROMPT)
    
    # Optional: filtros de canal/servidor (si est√°n vac√≠os, escucha en todos)
    ALLOWED_GUILD_IDS: Optional[str] = Field(default=None)  # comma-separated IDs
    ALLOWED_CHANNEL_IDS: Optional[str] = Field(default=None)  # comma-separated IDs
    
    # Configuraci√≥n para simular comportamiento humano
    MIN_TYPING_DELAY: float = Field(default=2.0)  # M√≠nimo tiempo "pensando"
    MAX_TYPING_DELAY: float = Field(default=8.0)  # M√°ximo tiempo "pensando"
    WORDS_PER_SECOND: float = Field(default=3.5)  # Velocidad de "escritura" simulada
    RANDOM_PAUSE_CHANCE: float = Field(default=0.3)  # 30% de pausas adicionales

    # Rate limit client-side pacing (enviar mensajes con separaci√≥n m√≠nima por canal)
    MIN_SECONDS_BETWEEN_MESSAGES_PER_CHANNEL: float = Field(default=3.0)
    SEND_JITTER_SECONDS: float = Field(default=0.5)

    # Opciones de simulaci√≥n humana
    HUMAN_SIMULATION_ENABLED: bool = Field(default=True)
    TYPING_MAX_SECONDS_CAP: float = Field(default=2.5)

    # Cola por canal
    QUEUE_MAX_SIZE_PER_CHANNEL: int = Field(default=10)
    COALESCE_WINDOW_SECONDS: float = Field(default=2.0)

    # Mensaje aleatorio por inactividad
    INACTIVITY_ENABLED: bool = Field(default=True)
    INACTIVITY_SECONDS: float = Field(default=60)  # 5 minutos

    class Config:
        env_file = ".env"
        env_file_encoding = "utf-8"
        case_sensitive = False

    @validator("REPLY_COOLDOWN_SECONDS", "TIMEOUT_S", "MAX_RETRIES")
    def _non_negative(cls, v: int) -> int:  # noqa: N805
        if v < 0:
            raise ValueError("Configuration values must be non-negative")
        return v

    def get_allowed_guild_ids(self) -> set[int]:
        """Parse comma-separated guild IDs into a set of integers."""
        if not self.ALLOWED_GUILD_IDS:
            return set()
        try:
            return {int(gid.strip()) for gid in self.ALLOWED_GUILD_IDS.split(",") if gid.strip()}
        except ValueError:
            return set()

    def get_allowed_channel_ids(self) -> set[int]:
        """Parse comma-separated channel IDs into a set of integers."""
        if not self.ALLOWED_CHANNEL_IDS:
            return set()
        try:
            return {int(cid.strip()) for cid in self.ALLOWED_CHANNEL_IDS.split(",") if cid.strip()}
        except ValueError:
            return set()


# Busca y carga .env desde el directorio de trabajo hacia arriba
env_path = find_dotenv(filename=".env", usecwd=True)
loaded = load_dotenv(dotenv_path=env_path, override=True)
# Debug prints removidos - ya funciona

settings = Settings()  # Singleton for app-wide config


